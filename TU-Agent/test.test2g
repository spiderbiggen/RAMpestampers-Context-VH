use TUAgent as mas.
use agentKnowledge as knowledge.
use agentGoals as goals.
use tygron as module.
use tygron as actionspec.

timeout = 30.

%We're running into very strange problems with this file in travis
test tygron with
	pre {goal(indicatorGoal(_, _))}
	in {
		%Percept tests%
		percept(buildings(X)), bel(buildings([])) leadsto bel(buildings(X)).
		percept(stakeholders(X)) leadsto bel(stakeholders(X)).
		percept(stakeholders(X)), bel(stakeholders(Y), not(X=Y)) leadsto not(bel(stakeholders(Y))).
		percept(settings(X)) leadsto bel(settings(X)).
		percept(settings(X)), bel(settings(Y), not(X=Y)) leadsto not(bel(settings(Y))).
		percept(functions(X)) leadsto bel(functions(X)).
		percept(functions(X)), bel(functions(Y), not(X=Y)) leadsto not(bel(functions(Y))).
		percept(indicators(X)) leadsto bel(indicators(X)).
		percept(indicators(X)), bel(indicators(Y), not(X=Y)) leadsto not(bel(indicators(Y))).
		percept(lands(X)) leadsto bel(lands(X)).
		percept(lands(X)), bel(lands(Y), not(X=Y)) leadsto not(bel(lands(Y))).
		percept(zones(X)) leadsto bel(zones(X)).
		percept(zones(X)), bel(zones(Y), not(X=Y)) leadsto not(bel(zones(Y))).
		percept(requests(X)) leadsto bel(requests(X)).
		percept(requests(X)), bel(requests(Y), not(X=Y)) leadsto not(bel(requests(Y))).
		percept(actions(X)) leadsto bel(actions(X)).
		percept(actions(X)), bel(actions(Y), not(X=Y)) leadsto not(bel(actions(Y))).
		percept(upgradeTypes(X)) leadsto bel(upgradeTypes(X)).
		percept(upgradeTypes(X)), bel(upgradeTypes(Y), not(X=Y)) leadsto not(bel(upgradeTypes(Y))).
	}
 	post {true}

	tygronagent {
		do tygron.
	}
	