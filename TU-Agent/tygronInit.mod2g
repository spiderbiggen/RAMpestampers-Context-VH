use agentKnowledge as beliefs.

module tygronInit {
	%%%%% Percept Processing %%%%%
	if percept(stakeholders(X))
		then insert(stakeholders(X)).
	if percept(settings(X))
		then insert(settings(X)).
	if percept(functions(X)) 
		then insert(functions(X)).
	if percept(buildings(X))
		then insert(buildings(X)).
	if percept(indicators(X))
		then insert(indicators(X)).
	if percept(lands(X))
		then insert(lands(X)).
	if percept(zones(X))
		then insert(zones(X)).
	if percept(requests(X))
		then insert(requests(X)).
	if percept(actions(X))
		then insert(actions(X)).
	if percept(upgradeTypes(X))
		then insert(upgradeTypes(X)).

	%insert the oldbuildings
	if bel(buildings(X), getOldBuildings(Bag,X)) 
		then insert(oldBuildings(Bag)).
	
	%Retrieve the indicatorlink for our stakeholder
	if bel(stakeholders(X), member([stakeholder(_, 'TU', Budget, _), indicatorLink(_ ,Weights)], X))
		then insert(indicatorlink(Weights)) + insert(budget(Budget)).
		
	%insert indicator when it doesn't exist at all
	forall bel(indicatorlink(Weights), member(indicatorWeights(IndicatorID, Name, _), Weights), indicators(Indicators), member(indicator(IndicatorID, Current, Target, _), Indicators)), not(bel(indicator(IndicatorID, Name, _, Target)))
		do insert(indicator(IndicatorID, Name, Current, Target)).
	
	%We insert cycle 0 so we can start counting from here
	if true
		then insert(cycle(0)).
	
	if bel(buildings(Buildings), upgradeTypes(UpgradeTypes), functions(Functions), getUseableUpgrades(Buildings, Functions, UpgradeTypes, Bag))
		then insert(upgrades(Bag)). 
}
