use agentKnowledge as knowledge.

module tygronEvents {
	%%%%% Percept Processing %%%%%
	if percept(stakeholders(X)), bel(stakeholders(Y)) 
		then delete(stakeholders(Y)) + insert(stakeholders(X)).
	if percept(settings(X)), bel(settings(Y)) 
		then delete(settings(Y)) + insert(settings(X)).
	if percept(functions(X)), bel(functions(Y)) 
		then delete(functions(Y)) + insert(functions(X)).
	if percept(buildings(X)), bel(buildings([])) 
		then delete(buildings([])) + insert(buildings(X)).
	if percept(indicators(X)), bel(indicators(Y)) 
		then delete(indicators(Y)) + insert(indicators(X)).
	if percept(lands(X)), bel(lands(Y)) 
		then delete(lands(Y)) + insert(lands(X)).
	if percept(zones(X)), bel(zones(Y)) 
		then delete(zones(Y)) + insert(zones(X)).
	if percept(requests(X)), bel(requests(Y)) 
		then delete(requests(Y)) + insert(requests(X)).
	if percept(actions(X)), bel(actions(Y)) 
		then delete(actions(Y)) + insert(actions(X)).
	if percept(upgradeTypes(X)), bel(upgradeTypes(Y)) 
		then delete(upgradeTypes(Y)) + insert(upgradeTypes(X)).
		
	if bel(requests(X)) then print(X).
		
	%Add the goal of answering a request every time the agent receives one
	if bel(requests(X), not(empty(X)), member(request(Type, Category, PopupID, ContentlinkID, VisibleStakeholderIDs, Answers, ActionLogIDS, Price, Multipolygon), X))
		then adopt(answerRequest(Category, PopupID)).

	%insert oldbuildings once
	if bel(noOldBuildings, buildings(X), getOldBuildings(Bag,X)) 
		then insert(oldBuildings(Bag)) + delete(noOldBuildings).
	
	%Retrieve the indicatorlink for our stakeholder
	if bel(readIndicatorlink, stakeholders(X), member([stakeholder(_, 'TU', Budget, _), indicatorLink(_ ,Weights)], X))
		then insert(indicatorlink(Weights)) + delete(readIndicatorlink).
		
	%insert indicator when it doesn't exist at all
	forall bel(indicatorlink(Weights), member(indicatorWeights(IndicatorID, Name, _), Weights), indicators(Indicators), member(indicator(IndicatorID, Current, Target, _), Indicators)), not(bel(indicator(IndicatorID, Name, _, Target)))
		do insert(indicator(IndicatorID, Name, Current, Target)).
	%update indicator when it does exist but is changed.
	forall percept(indicators(X)), bel(indicatorlink(Weights), member(indicatorWeights(IndicatorID, Name, _), Weights), indicators(Indicators), member(indicator(IndicatorID, Current, Target, _), Indicators)), bel(indicator(IndicatorID, Name, OldCurrent, Target))
		do delete(indicator(IndicatorID, Name, OldCurrent, Target)) + insert(indicator(IndicatorID, Name, Current, Target)).
	
	%set up the goals for the indicators
	forall bel(indicator(_, Name, _, Target)), goal(getIndicatorGoals)
		do adopt(indicatorGoal(Name, Target)).
	
	%we can drop this after the first run%
	if goal(getIndicatorGoals)
		then drop(getIndicatorGoals).
		
	%Update the upgrade type list
	if bel(readUpgrades, buildings(Buildings), upgradeTypes(UpgradeTypes), functions(Functions), getUseableUpgrades(Buildings, Functions, UpgradeTypes, Bag), upgrades(T))
		then delete(readUpgrades) + delete(upgrades(T)) + insert(upgrades(Bag)). 
		
 
}
